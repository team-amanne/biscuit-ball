<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.amanne.biscuitball.mybatis.IUserDAO">	

	<!-- 	public void registerUser(UserDTO user);	 // 회원가입 -->
	<select id="registerUser" 
	 parameterType="com.amanne.biscuitball.mybatis.UserDTO"
	 statementType="CALLABLE">
		{ call PRC_USER_REGISTER
			(
			    #{userEmail},
			    #{userPassword},
			    #{userName},
			    #{userNickname},
			    #{userBirthday},
			    #{userGenderCode},
			    #{userHeight},
			    #{selfEvaluationType},
			    #{userCityCode},
			    #{userTel},
			    #{userPositionCode},
			    #{snsSync},
			    #{returnValue ,mode=OUT, jdbcType=VARCHAR}

			)

		}
	</select>
	
	<!-- 	public int checkUserNickname(String userNickname) // 닉네임 중복체크-->
	<select id="checkUserNickname"
	 parameterType="java.lang.String"
	 resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM TBL_USER_ACCOUNT
		WHERE USER_NICKNAME = #{userNickname}	
	</select>
	
	<!-- 	public int checkTelephone(String telphone) // 전화번호 중복체크-->
	<select id="checkTelephone"
	 parameterType="java.lang.String"
	 resultType="java.lang.Integer">	

		SELECT COUNT(*)
		FROM
		(
		    SELECT USER_TEL
		    FROM TBL_USER
		    
		    UNION
		    
		    SELECT USER_TEL
		    FROM TBL_USER_DROP
		    WHERE USER_DROP_REQ_DATE <![CDATA[<]]> SYSDATE-30
		)
		WHERE USER_TEL = #{telphone}

	</select>
	
	<!-- 	public int checkEmail(String email) // 이메일 중복체크-->
	<select id="checkEmail"
	 parameterType="java.lang.String"
	 resultType="java.lang.Integer">	

		SELECT COUNT(*)
		FROM
		(
		    SELECT USER_EMAIL
		    FROM TBL_USER
		    
		    UNION
		    
		    SELECT USER_EMAIL
		    FROM TBL_USER_DROP
		)
		WHERE USER_EMAIL = #{email}

	</select>
	
	<!-- 	public void requestRemoveUser(String userAccountCode) // 회원탈퇴요청-->
	<delete id="requestRemoveUser"
	 parameterType="java.lang.String">	

		DELETE 
		FROM TBL_USER 
		WHERE USER_ACCT_CODE = #{userAccountCode}

	</delete>
	
	<!-- 	public int cancelRequestRemoveUser(String useruserAccountCode) // 회원탈퇴요청취소-->
	<delete id="cancelRequestRemoveUser"
	 parameterType="java.lang.String">	

		DELETE
		FROM TBL_USER_DROP
		WHERE USER_ACCT_CODE = #{useruserAccountCode}

	</delete>

	<!-- 	public int updateUser(UserDTO user) // 회원정보변경-->
	<update id="updateUser"
	 parameterType="com.amanne.biscuitball.mybatis.UserDTO"
	 statementType="CALLABLE">	
		UPDATE TBL_USER
		SET USER_TEL= #{userTel}
		  , USER_HEIGHT= #{userHeight}
		  , USER_CITY_CODE= #{userCityCode}
		  <if test="userPassword != null">
		  ,	USER_PWD= #{userPassword} 			
		  </if>
		WHERE USER_ACCT_CODE = #{userAccountCode}
		
	</update>
	
	<!-- 	public int updateUserProfile(UserDTO user) // 회원프로필변경-->
	<update id="updateUserProfile"
	 parameterType="com.amanne.biscuitball.mybatis.UserDTO"
	 statementType="CALLABLE">	
		UPDATE TBL_USER_PROFILE_INFO
		SET USER_PROFILE_IMG= #{userProfileImg, jdbcType=VARCHAR}
		  , USER_PROFILE_TXT= #{userProfileTxt, jdbcType=VARCHAR}
		  , USER_COURT_CODE= #{userCourtCode, jdbcType=VARCHAR}
		  , USER_POSITION_CODE= #{userPositionCode, jdbcType=VARCHAR}
		  , USER_TITLE_ACHV= #{titleAchievementCode, jdbcType=VARCHAR}
		  , SMS_RECEIVE_CODE= #{smsReceive, jdbcType=VARCHAR}
		  , USER_CITY_OP_CODE= #{cityOpen, jdbcType=VARCHAR}
		  , USER_ACHV_OP_CODE= #{achvOpen, jdbcType=VARCHAR}
		  , USER_GENDER_OP_CODE= #{genderOpen, jdbcType=VARCHAR}
		  , USER_COURT_OP_CODE= #{courtOpen, jdbcType=VARCHAR}
		  , USER_PL_OP_CODE= #{playlogOpen, jdbcType=VARCHAR}
		  , MSG_BLOCK_TYPE_CODE= #{msgBlockCode, jdbcType=VARCHAR}
		WHERE USER_ACCT_CODE = #{userAccountCode}	
		
	</update>

	<!-- public int addSnsSync(String userCode, String snsKey) // SNS연동-->
	<insert id="addSnsSync"
	 parameterType="java.lang.String">	
	 
		INSERT INTO TBL_SNS_SYNC(SNS_SYNC_CODE, USER_CODE, SNS_KEY)
		VALUES(FN_CREATE_CODE('TBL_SNS_SYNC', SEQ_SNS_SYNC.NEXTVAL)
		, #{userCode}, #{snsKey})		
	</insert>
	
	<!-- public int removeSnsSync(String userCode) // SNS연동 삭제-->
	<delete id="removeSnsSync"
	 parameterType="java.lang.String">	
	 
		DELETE FROM TBL_SNS_SYNC WHERE USER_CODE = #{userCode}
				
	</delete>
	
	<!-- 	public void sendMessage(MessageDTO msgDTO) // 메시지발신-->
	<select id="sendMessage" 
	 parameterType="com.amanne.biscuitball.mybatis.MessageDTO"
	 statementType="CALLABLE">
		{ call PRC_SEND_MESSAGE
			(
			    #{senderAccountCode},
			    #{receiverAccountCode},
			    #{messageSubject},
			    #{messageContent},
			    #{returnValue ,mode=OUT, jdbcType=VARCHAR}
			)
		}
	</select>
	
	<!-- 	public int readMessage(String msgCode)	 // 메시지 열람-->
	<update id="readMessage"
	 parameterType="java.lang.String">	
		UPDATE TBL_RECEIVE_MESSAGE
		SET READ_DATE = SYSDATE
		WHERE CREATE_MSG_CODE = #{msgCode}
	</update>

	
	<!-- 	public int removeSentMessage(String msgCode)	 // 발신메시지삭제-->
	<update id="removeSentMessage"
	 parameterType="java.lang.String">	
		UPDATE TBL_RECEIVE_MESSAGE
		SET DEL_DATE=SYSDATE
		WHERE CREATE_MSG_CODE = #{msgCode}	
	</update>

	<!-- 	public int removeReceivedMessage(String msgCode)	 // 수신메시지삭제-->
	<update id="removeReceivedMessage"
	 parameterType="java.lang.String">	
		UPDATE TBL_SEND_MESSAGE
		SET DEL_DATE=SYSDATE
		WHERE CREATE_MSG_CODE = #{msgCode}	
	</update>	
	
	<!-- 	public void getAchievement(PersonalAchievementDTO personalAchievementDTO) // 개인업적획득-->
	<select id="getAchievement" 
	 parameterType="com.amanne.biscuitball.mybatis.PersonalAchievementDTO"
	 statementType="CALLABLE">
		{ call PRC_PERS_ACHV_GET
			(
			    #{getterAccountCode},
			    #{personalAchievementCode},
			    #{returnValue ,mode=OUT, jdbcType=VARCHAR}
			)
		}
	</select>
	
	
	<!-- 	public void issuePasswordResetCode(String userCode) // 비번재설정코드발급-->
	<select id="issuePasswordResetCode" 
	 parameterType="com.amanne.biscuitball.mybatis.UserDTO"
	 statementType="CALLABLE">
		{ call PRC_PWD_RESET_CODE
			(
			    #{userCode},
			    #{returnValue ,mode=OUT, jdbcType=VARCHAR}
			)
		}
	</select>
	
	<!-- 	public void resetPassword(String userCode, String issueCode) // 비밀번호재설정 -->
	<select id="resetPassword" 
	 parameterType="com.amanne.biscuitball.mybatis.UserDTO"
	 statementType="CALLABLE">
	 	{ call PRC_PWD_RESET
			(
			    #{issueCode},
			    #{userPassword},
			    #{userDTO.returnValue ,mode=OUT, jdbcType=VARCHAR}
			)
		}
	</select>
	
	<!-- 	public int blockUser(String blockingAccountCode, String blockedAccountCode)	 // 회원차단 -->
	<insert id="blockUser" 
	 parameterType="java.lang.String">	 
		 INSERT INTO TBL_USER_BLOCK(USER_BLOCK_CODE, BLOCKING_ACCT_CODE, BLOCKED_ACCT_CODE)
		 VALUES(
		     FN_CREATE_CODE('TBL_USER_BLOCK', SEQ_USER_BLOCK.NEXTVAL)
		     , #{blockingAccountCode}
		     , #{blockedAccountCode}
		 )	 	
	</insert>
	
	<!-- 	public void loginAsUser(LoginDTO loginDTO)	 // 로그인 -->
	<select id="loginAsUser" 
	 parameterType="com.amanne.biscuitball.mybatis.LoginDTO"
	 statementType="CALLABLE">	 
		 { call PRC_LOGIN
			(
			    #{email},
			    #{password},
			    #{ip},
			    #{returnValue ,mode=OUT, jdbcType=VARCHAR}
			)
		}	 	
	</select>	
	
	<!-- 	public void makeFriendRequest(FriendRequestDTO dto)	 // 친구신청 -->
	<select id="makeFriendRequest" 
	 parameterType="com.amanne.biscuitball.mybatis.FriendRequestDTO"
	 statementType="CALLABLE">	 
		 { call PRC_FRIEND_REQUEST
			(
			    #{senderAccountCode},
			    #{receiverAccountCode},
			    #{returnValue ,mode=OUT, jdbcType=VARCHAR}
			)
		}	 	
	</select>	
	
	<!-- 	public void acceptFriendRequest(FriendRequestDTO dto)	 // 친구신청수락 -->
	<select id="acceptFriendRequest" 
	 parameterType="com.amanne.biscuitball.mybatis.FriendRequestDTO"
	 statementType="CALLABLE">	 
		 { call PRC_FRIEND_REQ_YES
			(
			    #{friendRequestCode}
			    #{returnValue ,mode=OUT, jdbcType=VARCHAR}
			)
		}	 	
	</select>		
	
	
	<!-- 	public void denyFreindRequest(FriendRequestDTO dto)	 // 친구신청거절 -->
	<select id="denyFreindRequest" 
	 parameterType="com.amanne.biscuitball.mybatis.FriendRequestDTO"
	 statementType="CALLABLE">	 
		 { call PRC_FRIEND_REQ_NO
			(
			    #{friendRequestCode}
			    #{returnValue ,mode=OUT, jdbcType=VARCHAR}
			)
		}	 	
	</select>
	
	<!-- 	public int readNotification(String notificationCode)	 // 알림 열람 -->
	<delete id="readNotification" 
	 parameterType="java.lang.String">	 
		UPDATE TBL_NOTIFICATION
		SET READ_DATE=SYSDATE
		WHERE NOTIF_CODE= #{notificationCode}		
	</delete>	
	
	<!-- 	public int removeNotification(String notificationCode)	 // 알림 삭제 -->
	<update id="removeNotification"> 
		DELETE
		FROM TBL_NOTIFICATION
		WHERE NOTIF_CODE= #{notificationCode}
	</update>
	
	<!-- 	public int cancelFriendRequest(String friendRequestCode)	 // 친구 신청 취소  -->
	<delete id="cancelFriendRequest" 
	 parameterType="java.lang.String">	 
		DELETE 
		FROM TBL_FRIEND_REQUEST
		WHERE FRIEND_REQ_CODE = #{friendRequestCode}	
	</delete>
	
	<!-- 	public ArrayList<UserDTO> getUserListByNickname(@Param("keyword") String keyword, @Param("start") int start, @Param("end") int end) // 닉네임 유사한 유저 검색 -->
	<select id="getUserListByNickname"
	 resultType="com.amanne.biscuitball.mybatis.UserDTO">
		SELECT USER_ACCT_CODE AS "userAccountCode", USER_NICKNAME AS "userNickname", USER_PROFILE_IMG AS "userProfileImg"
		FROM    
		(
		    SELECT V1.USER_ACCT_CODE, V1.USER_NICKNAME, T1.USER_PROFILE_IMG
		         , ROW_NUMBER() OVER(ORDER BY V1.USER_NICKNAME)  AS "RNUM"
		    FROM VIEW_USER V1, TBL_USER_PROFILE_INFO T1
		    WHERE V1.USER_ACCT_CODE = T1.USER_ACCT_CODE
		    AND  USER_NICKNAME LIKE #{keyword} || '%'
		)
		WHERE RNUM <![CDATA[>]]>= #{start} AND RNUM <![CDATA[<]]>= #{end}
	</select>
	
	<!-- 	public int countUsersByNickname(String keyword)	 // 닉네임 유사한 유저 전체 수 -->
	<select id="countUsersByNickname" 
	 parameterType="java.lang.String">
	 	SELECT COUNT(*)
		FROM VIEW_USER
		WHERE USER_NICKNAME LIKE #{keyword} || '%'
	</select>
	
	<!-- public MessageDTO getMessage(String messageCode); // 메시지 조회 -->
	<select id="getMessage"
	 resultType="com.amanne.biscuitball.mybatis.MessageDTO">
		SELECT V1.CREATE_MSG_CODE AS "messageCode", V1.SENDER_ACCT_CODE AS "senderAccountCode", V1.RECEIVER_ACCT_CODE AS "receiverAccountCode"
		     , V1.MSG_SUBJECT AS "messageSubject", V1.MSG_CONTENT AS "messageContent", V1.SEND_DATE AS "sendDate"
		     , V1.RECEIVER_READ_DATE AS "receiverReadDate", V1.SENDER_DEL_DATE AS "senderDelDate", V1.RECEIVER_DEL_DATE AS "receiverDelDate"
		     , (
		            SELECT USER_NICKNAME
		            FROM TBL_USER_ACCOUNT
		            WHERE USER_ACCT_CODE = V1.SENDER_ACCT_CODE
		       ) AS "senderNickname"
		     , (
		            SELECT USER_NICKNAME
		            FROM TBL_USER_ACCOUNT
		            WHERE USER_ACCT_CODE = V1.RECEIVER_ACCT_CODE
		       ) AS "receiverNickname"
		FROM VIEW_MESSAGE V1
		WHERE CREATE_MSG_CODE = #{messageCode}	 	
	</select> 
	
	<!-- 	public ArrayList<MessageDTO> getSentMessageList(@Param("userAccountCode") String userAccountCode, @Param("start") int start, @Param("end") int end)	 // 특정유저 발신메시지 조회	 -->
	<select id="getSentMessageList" 
	 resultType="com.amanne.biscuitball.mybatis.MessageDTO">
	 	SELECT CREATE_MSG_CODE AS "messageCode", SENDER_ACCT_CODE AS "senderAccountCode", RECEIVER_ACCT_CODE AS "receiverAccountCode"
                 , MSG_SUBJECT AS "messageSubject", MSG_CONTENT AS "messageContent", SEND_DATE AS "sendDate", RECEIVER_READ_DATE AS "receiverReadDate"
                 , SENDER_DEL_DATE AS "senderDelDate", RECEIVER_DEL_DATE AS "receiverDelDate", SENDER_NICKNAME AS "senderNickname", RECEIVER_NICKNAME AS "receiverNickname"
	    FROM 
	    (
	        SELECT CREATE_MSG_CODE, SENDER_ACCT_CODE, RECEIVER_ACCT_CODE
	                 , MSG_SUBJECT, MSG_CONTENT, SEND_DATE, RECEIVER_READ_DATE
	                 , SENDER_DEL_DATE, RECEIVER_DEL_DATE, SENDER_NICKNAME , RECEIVER_NICKNAME
	                 , ROW_NUMBER() OVER(ORDER BY SEND_DATE DESC) AS "RNUM"
	        FROM 
	        (
	            SELECT V1.*
	                 , (
	                        SELECT  USER_NICKNAME
	                        FROM    TBL_USER_ACCOUNT
	                        WHERE   USER_ACCT_CODE = V1.SENDER_ACCT_CODE
	                   ) AS "SENDER_NICKNAME"
	                 , (
	                        SELECT  USER_NICKNAME
	                        FROM    TBL_USER_ACCOUNT
	                        WHERE   USER_ACCT_CODE = V1.RECEIVER_ACCT_CODE
	                   ) AS "RECEIVER_NICKNAME"
	            FROM VIEW_MESSAGE V1
	        )
	        WHERE SENDER_ACCT_CODE = #{userAccountCode}
	        AND   SENDER_DEL_DATE IS NULL
	        ORDER BY RNUM DESC
	    ) 
	    WHERE RNUM <![CDATA[>]]>= #{start} AND RNUM <![CDATA[<]]>= #{end}
	</select>
	
	
	
	<!-- 	public ArrayList<MessageDTO> getReceivedMessageList(@Param("userAccountCode") String userAccountCode, @Param("start") int start, @Param("end") int end)	 // 특정유저 수신메시지 조회	 -->
	<select id="getReceivedMessageList" 
	 resultType="com.amanne.biscuitball.mybatis.MessageDTO">
	 	SELECT CREATE_MSG_CODE AS "messageCode", SENDER_ACCT_CODE AS "senderAccountCode", RECEIVER_ACCT_CODE AS "receiverAccountCode"
                 , MSG_SUBJECT AS "messageSubject", MSG_CONTENT AS "messageContent", SEND_DATE AS "sendDate", RECEIVER_READ_DATE AS "receiverReadDate"
                 , SENDER_DEL_DATE AS "senderDelDate", RECEIVER_DEL_DATE AS "receiverDelDate", SENDER_NICKNAME AS "senderNickname", RECEIVER_NICKNAME AS "receiverNickname"
	    FROM 
	    (
	        SELECT CREATE_MSG_CODE, SENDER_ACCT_CODE, RECEIVER_ACCT_CODE
	                 , MSG_SUBJECT, MSG_CONTENT, SEND_DATE, RECEIVER_READ_DATE
	                 , SENDER_DEL_DATE, RECEIVER_DEL_DATE, SENDER_NICKNAME , RECEIVER_NICKNAME
	                 , ROW_NUMBER() OVER(ORDER BY SEND_DATE DESC) AS "RNUM"
	        FROM 
	        (
	            SELECT V1.*
	                 , (
	                        SELECT  USER_NICKNAME
	                        FROM    TBL_USER_ACCOUNT
	                        WHERE   USER_ACCT_CODE = V1.SENDER_ACCT_CODE
	                   ) AS "SENDER_NICKNAME"
	                 , (
	                        SELECT  USER_NICKNAME
	                        FROM    TBL_USER_ACCOUNT
	                        WHERE   USER_ACCT_CODE = V1.RECEIVER_ACCT_CODE
	                   ) AS "RECEIVER_NICKNAME"
	            FROM VIEW_MESSAGE V1
	        )
	        WHERE RECEIVER_ACCT_CODE = #{userAccountCode}
	        AND   RECEIVER_DEL_DATE IS NULL
	        ORDER BY RNUM DESC
	    ) 
	    WHERE RNUM <![CDATA[>]]>= #{start} AND RNUM <![CDATA[<]]>= #{end}
	</select>

	
	<!-- 	public int countSentMessageList(String userAccountCode)	 특정유저 발신메시지 전체 수 -->
	<select id="countSentMessageList">	 	
		SELECT COUNT(*)
		FROM  VIEW_MESSAGE 
		WHERE SENDER_ACCT_CODE = #{userAccountCode}
		AND   SENDER_DEL_DATE IS NULL
	</select>
	
	<!-- 	public int countReceivedMessageList(String userAccountCode) 특정유저 수신메시지 전체 수 -->
	<select id="countReceivedMessageList">	 	
		SELECT COUNT(*)
		FROM  VIEW_MESSAGE 
		WHERE RECEIVER_ACCT_CODE = #{userAccountCode}
		AND   RECEIVER_DEL_DATE IS NULL
	</select>
	
																			
	
	<!-- public ArrayList<FriendRequestDTO> getReceivedFriendRequestList(@Param("userAccountCode") String userAccountCode, @Param("start") int start, @Param("end") int end)	받은 친구신청 조회	 -->
	<select id="getReceivedFriendRequestList"
	 resultType="com.amanne.biscuitball.mybatis.FriendRequestDTO">	 	
		 SELECT FRIEND_REQ_CODE AS "friendRequestCode", RECEIVER_ACCT_CODE AS "receiverAccountCode", RECEIVER_NICKNAME AS "receiverNickname"
	     , FRIEND_REQ_DATE AS "requestDate", USER_PROFILE_IMG AS "receiverProfileImg"
		FROM
		(
			SELECT V1.FRIEND_REQ_CODE, V1.RECEIVER_ACCT_CODE, V1.RECEIVER_NICKNAME
					     , V1.FRIEND_REQ_DATE, T1.USER_PROFILE_IMG
			             , ROW_NUMBER() OVER(ORDER BY  V1.FRIEND_REQ_DATE DESC) AS "RNUM"
					FROM VIEW_FRIEND_REQUEST V1, TBL_USER_PROFILE_INFO T1
					WHERE T1.USER_ACCT_CODE = V1.RECEIVER_ACCT_CODE
					AND   V1.FRIEND_ANS_DATE IS NULL
					AND   V1.SENDER_ACCT_CODE = 'AF000055'
					ORDER BY FRIEND_REQ_DATE
		)
		WHERE RNUM <![CDATA[>]]>= #{start} AND RNUM <![CDATA[<]]>= #{end}
		ORDER BY FRIEND_REQ_DATE DESC
	</select>
	
	<!-- public ArrayList<FriendRequestDTO> getSentFriendRequestList(@Param("userAccountCode") String userAccountCode, @Param("start") int start, @Param("end") int end) 보낸 친구신청 조회-->
	<select id="getSentFriendRequestList"
	resultType="com.amanne.biscuitball.mybatis.FriendRequestDTO">	 	
		SELECT FRIEND_REQ_CODE AS "friendRequestCode", SENDER_ACCT_CODE AS "senderAccountCode", SENDER_NICKNAME AS "senderNickname"
	     , FRIEND_REQ_DATE AS "requestDate", USER_PROFILE_IMG AS "senderProfileImg"
		FROM
		(
			SELECT V1.FRIEND_REQ_CODE, V1.SENDER_ACCT_CODE, V1.SENDER_NICKNAME
					     , V1.FRIEND_REQ_DATE, T1.USER_PROFILE_IMG
			             , ROW_NUMBER() OVER(ORDER BY  V1.FRIEND_REQ_DATE DESC) AS "RNUM"
					FROM VIEW_FRIEND_REQUEST V1, TBL_USER_PROFILE_INFO T1
					WHERE T1.USER_ACCT_CODE = V1.SENDER_ACCT_CODE
					AND   V1.FRIEND_ANS_DATE IS NULL
					AND   V1.RECEIVER_ACCT_CODE = #{userAccountCode}
					ORDER BY FRIEND_REQ_DATE
		)
		WHERE RNUM <![CDATA[>]]>= #{start} AND RNUM <![CDATA[<]]>= #{end}
		ORDER BY FRIEND_REQ_DATE DESC
	</select>
	
	 <!--특정유저조회 -->
   <!--public UserDTO getUser(String userAccountCode) -->
   <select id="getUser" parameterType="java.lang.String"
      resultType="com.amanne.biscuitball.mybatis.UserDTO">   
	SELECT   VUP.USER_CODE as userCode
				,VUP.USER_ACCT_CODE as userAccountCode
		        , VUP.USER_NICKNAME as userNickname
		        , VUP.SNS_SYNC as snsSync
		        , VUP.USER_NAME as userName
		        , VUP.USER_EMAIL as userEmail
		        , VUP.USER_TEL as userTel
		        , VUP.USER_BIRTHDAY as userBirthday
		        , VUP.USER_HEIGHT as userHeight
		        , VUP.USER_REG_DATE as userRegisteredDate
		        , VUP.USER_GENDER as userGender
		        , VUP.SELF_EVAL_TYPE as selfEvaluationType
		        , VUP.GRADE as tierName
		        , VUP.FPS as fairplayScore
		        , VUP.USER_CITY as userCity
		        , VUP.USER_CITY_CODE as userCityCode
		        , VUP.USER_REGION_CODE as userRegionCode
		        , VUP.COURT_NAME as userCourtName
		        , VUP.USER_PROFILE_IMG as userProfileImg
		        , VUP.USER_PROFILE_TXT as userProfileTxt
		        , VUP.USER_COURT_CODE as userCourtCode
		        , VUP.USER_POSITION as userPosition
		        , VUP.USER_POSITION_ABBR as userPositionAbbr
		        , VUP.SMS_RECEIVE as smsReceive
		        , VUP.CITY_OPEN as cityOpen
		        , VUP.ACHV_OPEN as achvOpen
		        , VUP.GENDER_OPEN as genderOpen
		        , VUP.COURT_OPEN as courtOpen
		        , VUP.PL_OPEN as playlogOpen
		        , VUP.MSG_BLOCK_TYPE as msgBlockType
		        , VUP.CREW_CODE as userCrewCode
		        , VUP.CREW_MEMBER_CODE as  userCrewMemberCode
		        , VUP.CREW_NAME as userCrewName
		        , NVL(UP.USER_STATUS,'정상') AS userStatus
			    , UP.PENALTY_COUNT as penaltyCount
	            , TUPI.USER_TITLE_ACHV AS titleAchievementCode
	            , TPA.PERS_ACHV_NAME AS titleAchievementName
	            , TPA.PERS_ACHV_IMG AS titleAchievementImg
	            , TUPI.MSG_BLOCK_TYPE_CODE AS msgBlockCode
	            , VUP.USER_POSITION_CODE as userPositionCode
	
		FROM VIEW_USER_PROFILE VUP
		LEFT JOIN VIEW_USER_PENALTY_SUMMARY UP
		ON VUP.USER_ACCT_CODE = UP.USER_ACCT_CODE
	    LEFT JOIN TBL_USER_PROFILE_INFO TUPI
		ON VUP.USER_ACCT_CODE = TUPI.USER_ACCT_CODE
	    LEFT JOIN TBL_PERSONAL_ACHIEVEMENT_GET TPAG
		ON TUPI.USER_TITLE_ACHV = TPAG.PERS_ACHV_GET_CODE
	    LEFT JOIN TBL_PERSONAL_ACHIEVEMENTS TPA
		ON TPAG.PERS_ACHV_CODE = TPA.PERS_ACHV_CODE    
	    WHERE VUP.USER_ACCT_CODE = #{userAccountCode}
   </select>


   <!--특정유저알람조회 -->
   <!--public ArrayList<NotificationDTO> getNotificationArrayList(@Param("userAccountCode")String 
      userAccountCode, @Param("start") int start, @Param("end") int end); // 특정 
      유저 알림 조회 -->
   <select id="getNotificationArrayList"
      parameterType="java.lang.String"
      resultType="com.amanne.biscuitball.mybatis.UserDTO">

      SELECT NOTIF_CODE as notificationCode, USER_ACCT_CODE as
      userAccountcode, NOTIF_TYPE_CODE as notificationTypeCode
      , CREATE_DATE as createDate, READ_DATE as readDate, URL as url,
      NOTIF_CONTENT as notificationContent
      FROM
      (
      SELECT NOTIF_CODE, USER_ACCT_CODE, NOTIF_TYPE_CODE, CREATE_DATE, READ_DATE,
      URL, NOTIF_CONTENT,ROWNUM AS RNUM
      FROM TBL_NOTIFICATION
      WHERE USER_ACCT_CODE = #{userAccountCode}
      )
      WHERE RNUM <![CDATA[>]]>= #{start}  AND  RNUM  <![CDATA[<]]>= #{end}
   </select>

   <!-- 특정유저알림 전체수 -->
   <!-- public int countNotifications(String userAccountCode); -->
   <select id="countNotifications" parameterType="java.lang.String">
      SELECT COUNT(*)
      FROM TBL_NOTIFICATION
      WHERE USER_ACCT_CODE = #{userAccountCode}
   </select>

   <!-- 특정유저 획득업적조회 -->
   <!-- public ArrayList<PersonalAchievementDTO> getPersonalAchievementList(@Param("userAccountCode")String 
      userAccountCode, @Param("start") int start, @Param("end") int end) -->
   <select id="getPersonalAchievementList"
      resultType="com.amanne.biscuitball.mybatis.PersonalAchievementDTO">
      SELECT getterAccountCode AS getterAccountCode
     , personalAchievementGetCode AS personalAchievementGetCode
     , getterNickname AS getterNickname
     , personalAchievementCode AS personalAchievementCode
     , personalAchievementName AS personalAchievementName
     , personalAchievementImg AS personalAchievementImg
     , personalAchievementCondition AS personalAchievementCondition
     , personalAchievementGetDate AS personalAchievementGetDate
     , titleAchievementStatus AS titleAchievementStatus
     , getAchievementStatus AS getAchievementStatus
	FROM
	(
	    SELECT V2.PERS_ACHV_GET_CODE personalAchievementGetCode
	         , #{userAccountCode} AS getterAccountCode
	         , (
	               SELECT USER_NICKNAME
	               FROM TBL_USER_ACCOUNT
	               WHERE USER_ACCT_CODE = #{userAccountCode}
	           ) AS getterNickname
	         , V1.PERS_ACHV_CODE AS personalAchievementCode
	         , V1.PERS_ACHV_NAME AS personalAchievementName
	         , V1.PERS_ACHV_IMG AS personalAchievementImg
	         , V1.PERS_ACHV_CONDITION AS personalAchievementCondition        
	         , V2.PERS_ACHV_GET_DATE AS personalAchievementGetDate
	         , CASE WHEN (
	                         SELECT TITLE_ACHV_CODE
	                         FROM VIEW_USER
	                         WHERE USER_CODE= #{userAccountCode}
	                     ) = V2.PERS_ACHV_CODE THEN 'YES'
	           ELSE 'NO'    
	           END AS titleAchievementStatus
	         , S1.GET_ACHIEVEMENT_STATUS AS getAchievementStatus
	         , ROW_NUMBER() OVER(ORDER BY V2.PERS_ACHV_GET_CODE, S1.GET_ACHIEVEMENT_STATUS DESC) AS pageNumber
	    FROM TBL_PERSONAL_ACHIEVEMENTS V1 LEFT JOIN
	    (
	      SELECT
	      PERS_ACHV_GET_CODE,PERS_ACHV_GET_DATE,GETTER_ACCT_CODE,GETTER_NICKNAME,PERS_ACHV_CODE,PERS_ACHV_NAME,PERS_ACHV_IMG,PERS_ACHV_CONDITION
	      FROM VIEW_PERSONAL_ACHIEVEMENT_GET
	      WHERE GETTER_ACCT_CODE =
	      #{userAccountCode}
	    )V2
	    ON V1.PERS_ACHV_CODE = V2.PERS_ACHV_CODE
	    JOIN
	    (
	        SELECT 'ZO01' AS PERS_ACHV_CODE                                                                                              -- 회원가입
	             , 100 AS GET_ACHIEVEMENT_STATUS                             
	        FROM DUAL
	        
	        UNION
	        
	        SELECT 'ZO02' AS PERS_ACHV_CODE                                                                                              -- 첫 모임 플레이
	             , CASE WHEN (
	                            SELECT COUNT(*) AS COUNT
	                            FROM   TBL_PERSONAL_ACHIEVEMENT_GET
	                            WHERE  GETTER_ACCT_CODE = #{userAccountCode}                                                                     -- 유저 코드*
	                            AND    PERS_ACHV_CODE = 'ZO02' 
	                         ) = 1 THEN 100
	               WHEN (
	                        SELECT COUNT(MEET_CODE) AS COUNT
	                        FROM
	                        (
	                            SELECT TM.MEET_CODE
	                            FROM   TBL_MEETING TM
	                            LEFT JOIN   TBL_MEETING_JOIN TMJ
	                            ON     TM.MEET_CODE = TMJ.MEET_CODE
	                            LEFT JOIN   (          
	                                        SELECT MEET_CODE, COUNT(MEET_CODE) AS JOIN_COUNT
	                                        FROM VIEW_MEETING_JOIN
	                                        WHERE CANCEL_OR_NOT = '참여 중'
	                                        GROUP BY MEET_CODE
	                                   ) VMJ
	                            ON     TM.MEET_CODE = VMJ.MEET_CODE
	                            WHERE  TMJ.JOIN_ACCT_CODE = #{userAccountCode}                                                                   -- 유저 코드*
	                            AND    TM.MEET_PEOPLE_NUMBER = VMJ.JOIN_COUNT
	                            AND    TM.MEET_DATE <![CDATA[<]]>= SYSDATE
	                        )
	                    ) <![CDATA[>]]> 0 THEN 100
	               ELSE 0 
	               END AS GET_ACHIEVEMENT_STATUS
	        FROM DUAL
	        
	        UNION
	        
	        SELECT 'ZO03' AS PERS_ACHV_CODE                                                                                              -- 모임 100회 플레이   
	             , CASE WHEN (
	                            SELECT COUNT(*) AS COUNT
	                            FROM   TBL_PERSONAL_ACHIEVEMENT_GET
	                            WHERE  GETTER_ACCT_CODE = #{userAccountCode}                                                                     -- 유저 코드*
	                            AND    PERS_ACHV_CODE = 'ZO03' 
	                         ) = 1 THEN 100
	               ELSE (                  
	                        SELECT COUNT(MEET_CODE) AS MEET_COUNT
	                        FROM
	                        (
	                            SELECT TM.MEET_CODE
	                            FROM   TBL_MEETING TM
	                            LEFT JOIN   TBL_MEETING_JOIN TMJ
	                            ON     TM.MEET_CODE = TMJ.MEET_CODE
	                            LEFT JOIN   (          
	                                        SELECT MEET_CODE, COUNT(MEET_CODE) AS JOIN_COUNT
	                                        FROM VIEW_MEETING_JOIN
	                                        WHERE CANCEL_OR_NOT = '참여 중'
	                                        GROUP BY MEET_CODE
	                                   ) VMJ
	                            ON     TM.MEET_CODE = VMJ.MEET_CODE
	                            WHERE  TMJ.JOIN_ACCT_CODE = #{userAccountCode}                                                                   -- 유저 코드*
	                            AND    TM.MEET_PEOPLE_NUMBER = VMJ.JOIN_COUNT
	                            AND    TM.MEET_DATE <![CDATA[<]]>= SYSDATE
	                        )
	                    )
	               END AS GET_ACHIEVEMENT_STATUS
	        FROM DUAL
	        
	        
	        UNION
	        
	        SELECT  'ZO04' AS PERS_ACHV_CODE                                                                                             -- 친구 50명 이상
	             , CASE WHEN (
	                            SELECT COUNT(*) AS COUNT
	                            FROM   TBL_PERSONAL_ACHIEVEMENT_GET
	                            WHERE  GETTER_ACCT_CODE = #{userAccountCode}                                                                     -- 유저 코드*
	                            AND    PERS_ACHV_CODE = 'ZO04' 
	                         ) = 1 THEN 100
	                ELSE (
	                        SELECT COUNT(FRIEND_REQ_RES_CODE) * 2
	                        FROM   TBL_FRIEND_REQUEST
	                        WHERE  FRIEND_REQ_RES_CODE = 'ZU01'
	                        AND    ( RECEIVER_ACCT_CODE = #{userAccountCode} OR SENDER_ACCT_CODE = #{userAccountCode} )                                   -- 유저 코드*
	                     ) 
	                END AS GET_ACHIEVEMENT_STATUS
	        FROM DUAL
	         
	        UNION
	         
	        SELECT 'ZO05' AS PERS_ACHV_CODE                                                                                              -- 생일날 플레이
	             , CASE WHEN (
	                            SELECT COUNT(*) AS COUNT
	                            FROM   TBL_PERSONAL_ACHIEVEMENT_GET
	                            WHERE  GETTER_ACCT_CODE = #{userAccountCode}                                                                     -- 유저 코드*
	                            AND    PERS_ACHV_CODE = 'ZO05' 
	                         ) = 1 THEN 100
	               ELSE (
	                        SELECT COUNT(PLAY_DATE)
	                        FROM
	                        (
	                                SELECT LPAD(EXTRACT(MONTH FROM MEET_DATE), 2, '0') || LPAD(EXTRACT(DAY FROM MEET_DATE), 2, '0') AS PLAY_DATE
	                                FROM
	                                (
	                                    SELECT TM.MEET_DATE AS MEET_DATE
	                                    FROM   TBL_MEETING TM
	                                    LEFT JOIN   TBL_MEETING_JOIN TMJ
	                                    ON     TM.MEET_CODE = TMJ.MEET_CODE
	                                    LEFT JOIN   (          
	                                                SELECT MEET_CODE, COUNT(MEET_CODE) AS JOIN_COUNT
	                                                FROM VIEW_MEETING_JOIN
	                                                WHERE CANCEL_OR_NOT = '참여 중'
	                                                GROUP BY MEET_CODE
	                                           ) VMJ
	                                    ON     TM.MEET_CODE = VMJ.MEET_CODE
	                                    WHERE  TMJ.JOIN_ACCT_CODE = #{userAccountCode}                                                           -- 유저 코드*
	                                    AND    TM.MEET_PEOPLE_NUMBER = VMJ.JOIN_COUNT
	                                    AND    TM.MEET_DATE <![CDATA[<]]>= SYSDATE  
	                                )
	                        )
	                        WHERE PLAY_DATE = (
	                                                     SELECT LPAD(EXTRACT(MONTH FROM USER_BIRTHDAY), 2, '0')
	                                                         || LPAD(EXTRACT(DAY FROM USER_BIRTHDAY), 2, '0') AS PLAY_DATE
	                                                     FROM   TBL_USER
	                                                     WHERE  USER_ACCT_CODE = #{userAccountCode}                                              -- 유저 코드*
	                                          )
	                    )
	               END AS GET_ACHIEVEMENT_STATUS
	        FROM DUAL
	        
	        UNION
	        
	        SELECT 'ZO06' AS PERS_ACHV_CODE                                                                                              -- 내 리뷰 좋아요 1000회
	             , CASE WHEN (
	                            SELECT COUNT(*) AS COUNT
	                            FROM   TBL_PERSONAL_ACHIEVEMENT_GET
	                            WHERE  GETTER_ACCT_CODE = #{userAccountCode}                                                                     -- 유저 코드*
	                            AND    PERS_ACHV_CODE = 'ZO06' 
	                         ) = 1 THEN 100
	               ELSE (
	                        SELECT COUNT(COURT_REVIEW_CODE)/10
	                        FROM
	                        (
	                            SELECT TCR.COURT_REVIEW_CODE
	                            FROM   TBL_COURT_REVIEW TCR
	                            JOIN   TBL_COURT_REVIEW_EVAL TCRE
	                            ON     TCR.COURT_REVIEW_CODE = TCRE.COURT_REVIEW_CODE
	                            WHERE  TCR.REGISTRANT_ACCT_CODE = #{userAccountCode}                                                             -- 유저 코드*
	                        )
	                    )
	               END AS GET_ACHIEVEMENT_STATUS
	        FROM DUAL
	        
	        UNION
	        
	        SELECT 'ZO07' AS PERS_ACHV_CODE                                                                                              -- 농구공지참 플레이 10회
	             , CASE WHEN (
	                            SELECT COUNT(*) AS COUNT
	                            FROM   TBL_PERSONAL_ACHIEVEMENT_GET
	                            WHERE  GETTER_ACCT_CODE = #{userAccountCode}                                                                     -- 유저 코드*
	                            AND    PERS_ACHV_CODE = 'ZO07' 
	                         ) = 1 THEN 100
	               ELSE (
	                        SELECT COUNT(MEET_CODE)*10 AS MEET_COUNT
	                        FROM
	                        (
	                            SELECT TM.MEET_CODE
	                            FROM   TBL_MEETING TM
	                            LEFT JOIN   TBL_MEETING_JOIN TMJ
	                            ON     TM.MEET_CODE = TMJ.MEET_CODE
	                            LEFT JOIN   (          
	                                        SELECT MEET_CODE, COUNT(MEET_CODE) AS JOIN_COUNT
	                                        FROM VIEW_MEETING_JOIN
	                                        WHERE CANCEL_OR_NOT = '참여 중'
	                                        GROUP BY MEET_CODE
	                                   ) VMJ
	                            ON     TM.MEET_CODE = VMJ.MEET_CODE
	                            WHERE  TMJ.JOIN_ACCT_CODE = #{userAccountCode}                                                                   -- 유저 코드*
	                            AND    TM.MEET_PEOPLE_NUMBER = VMJ.JOIN_COUNT
	                            AND    TM.MEET_DATE <![CDATA[<]]>= SYSDATE
	                            AND    TMJ.BALL_EXIST_CODE = 'ZU01'
	                        )
	                    )
	               END AS GET_ACHIEVEMENT_STATUS
	        FROM DUAL
	        
	        UNION
	        
	        SELECT 'ZO08' AS PERS_ACHV_CODE                                                                                              -- 농구공지참 플레이 100회
	             , CASE WHEN (
	                            SELECT COUNT(*) AS COUNT
	                            FROM   TBL_PERSONAL_ACHIEVEMENT_GET
	                            WHERE  GETTER_ACCT_CODE = #{userAccountCode}                                                                     -- 유저 코드*
	                            AND    PERS_ACHV_CODE = 'ZO08' 
	                         ) = 1 THEN 100
	               ELSE (
	                        SELECT COUNT(MEET_CODE) AS MEET_COUNT
	                        FROM
	                        (
	                            SELECT TM.MEET_CODE
	                            FROM   TBL_MEETING TM
	                            LEFT JOIN   TBL_MEETING_JOIN TMJ
	                            ON     TM.MEET_CODE = TMJ.MEET_CODE
	                            LEFT JOIN   (          
	                                        SELECT MEET_CODE, COUNT(MEET_CODE) AS JOIN_COUNT
	                                        FROM VIEW_MEETING_JOIN
	                                        WHERE CANCEL_OR_NOT = '참여 중'
	                                        GROUP BY MEET_CODE
	                                   ) VMJ
	                            ON     TM.MEET_CODE = VMJ.MEET_CODE
	                            WHERE  TMJ.JOIN_ACCT_CODE = #{userAccountCode}                                                                   -- 유저 코드*
	                            AND    TM.MEET_PEOPLE_NUMBER = VMJ.JOIN_COUNT
	                            AND    TM.MEET_DATE <![CDATA[<]]>= SYSDATE
	                            AND    TMJ.BALL_EXIST_CODE = 'ZU01'
	                        )
	                    )
	               END AS GET_ACHIEVEMENT_STATUS
	        FROM DUAL
	    ) S1
	    ON V1.PERS_ACHV_CODE = S1.PERS_ACHV_CODE
	)
	WHERE pageNumber <![CDATA[>]]>= #{start} AND pageNumber <![CDATA[<]]>= #{end}                                                                                            -- 페이징 업적 순서번호
	ORDER BY pageNumber
   </select>


   <!-- 특정 유저 획득 업적 전체 수 -->
   <!-- public int countPersonalAchievements(String userAccountCode) -->
   <select id="countPersonalAchievements"
      parameterType="java.lang.String">
      SELECT COUNT(*)
      FROM VIEW_PERSONAL_ACHIEVEMENT_GET
      WHERE GETTER_ACCT_CODE = #{userAccountCode}
   </select>

   <!-- 특정 유저 친구 조회 -->
   <!-- public ArrayList<FriendRequestDTO> getFriendList(@Param("userAccountCode")String 
      userAccountCode, @Param("start") int start, @Param("end") int end) -->
   <select id="getFriendList"
      resultType="com.amanne.biscuitball.mybatis.FriendRequestDTO">
      SELECT FRIEND_REQ_CODE as friendRequestCode, SENDER_ACCT_CODE as
      senderAccountCode, SENDER_NICKNAME as senderNickname
      ,
      RECEIVER_ACCT_CODE as receiverAccountCode,
      (
      SELECT USER_PROFILE_IMG
      FROM
      TBL_USER_PROFILE_INFO
      WHERE USER_ACCT_CODE = RECEIVER_ACCT_CODE
      ) as
      receiverProfileImg
      , RECEIVER_NICKNAME as receiverNickname
      ,
      FRIEND_REQ_DATE as requestDate, FRIEND_ANS_DATE as answerDate
      FROM
      (
      SELECT FRIEND_REQ_CODE, SENDER_ACCT_CODE, SENDER_NICKNAME,
      RECEIVER_ACCT_CODE, RECEIVER_NICKNAME, FRIEND_REQ_DATE,
      FRIEND_ANS_DATE
      FROM VIEW_FRIEND_REQUEST
      WHERE SENDER_ACCT_CODE = #{userAccountCode} AND
      FRIEND_REQ_STATUS = '수락'
      )
      WHERE RNUM <![CDATA[>]]>= #{start}  AND  RNUM  <![CDATA[<]]>= #{end}
   </select>
   
	<!-- public int countFriendList(String userAccountCode); // 특정 유저 친구 수 -->
	<select id="countFriendList" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM
		(
			SELECT FRIEND_REQ_CODE
			     , SENDER_ACCT_CODE
			     , SENDER_NICKNAME
			     , RECEIVER_ACCT_CODE
			     , RECEIVER_NICKNAME
			     , FRIEND_REQ_DATE
			     , FRIEND_ANS_DATE
			FROM VIEW_FRIEND_REQUEST
			WHERE SENDER_ACCT_CODE = #{userAccountCode} 
			  AND FRIEND_REQ_STATUS = '수락'
		)
	</select>

   <!-- 특정 유저 차단 조회 -->
   <!--public ArrayList<UserDTO> getBlockUserList(@Param("userAccountCode")String 
      userAccountCode, @Param("start") int start, @Param("end") int end); -->
   <select id="getBlockUserList"
      resultType="com.amanne.biscuitball.mybatis.UserBlockDTO">
      SELECT USER_BLOCK_CODE as userBlockCode, BLOCKING_ACCT_CODE as
      blockingAccountCode, BLOCKING_NICKNAME as blockingNickname,
      BLOCKED_ACCT_CODE as blockedAccountCode,
      (
      SELECT USER_PROFILE_IMG
      FROM TBL_USER_PROFILE_INFO
      WHERE USER_ACCT_CODE = BLOCKED_ACCT_CODE
      ) as blockingProfileImg
      , BLOCKED_NICKNAME as blockedNickname
      FROM
      (
      SELECT USER_BLOCK_CODE, BLOCKING_ACCT_CODE, BLOCKING_NICKNAME,
      BLOCKED_ACCT_CODE, BLOCKED_NICKNAME
      FROM VIEW_USER_BLOCK
      WHERE BLOCKING_ACCT_CODE = #{userAccountCode}
      )
      WHERE RNUM <![CDATA[>]]>= #{start}  AND  RNUM  <![CDATA[<]]>= #{end}
      
   </select>
   
   <!-- 이메일로 유저 코드 검색 -->
   <!--public String getUserCodeByEmail(@Param("userEmail") String userEmail); -->
   <select id="getUserCodeByEmail"
	 parameterType="java.lang.String"
	 resultType="java.lang.String">
      SELECT USER_CODE as userCode
	  FROM VIEW_USER
	  WHERE USER_EMAIL = #{userEmail}
    
   </select>
</mapper>

